from django.test import TestCase
from rapidsms.contrib.locations.models import Location
from survey.models.locations import *
from survey.forms.household import *
from survey.models import EnumerationArea, Survey
from survey.models.households import Household
from survey.models.backend import Backend
from survey.models.interviewer import Interviewer


# class HouseholdFormTest(TestCase):
#     def test_valid(self):
#         country = LocationType.objects.create(name="Country",slug="country")
#         district = LocationType.objects.create(name="District",slug="district", parent=country)
#         uganda = Location.objects.create(name="Uganda", type=country)
#         some_village = Location.objects.create(name="Vilage", type=district, parent=uganda)
#         ea = EnumerationArea.objects.create(name="EA2")
#         ea.locations.add(some_village)
#         loc_ea=[ea]
#         survey = Survey.objects.create(name="Test Survey",description="Desc",sample_size=10,has_sampling=True)
#         form_data = {'uid': 6, 'ea': ea.id}
#         investigator = Interviewer.objects.create(name="Investigator",
#                                                    ea=ea,
#                                                    gender='1',level_of_education='Primary',
#                                                    language='Eglish',weights=0)
#         household_form = HouseholdForm(data=form_data, survey=survey, eas=loc_ea)
#         self.assertTrue(household_form.is_valid())
#         # investigator = Interviewer.objects.create(name="test", backend=Backend.objects.create(name='something'))
#         household_form.instance.investigator = investigator
#         household = household_form.save()
#         self.failUnless(household.id)
#         household_retrieved = Household.objects.get(investigator=investigator)
#         self.assertEqual(household_retrieved, household)

    # def test_positive_numbers(self):
    #     form_data = {
    #         'uid': -6,
    #     }
    #     household_form = HouseholdForm(data=form_data)
    #     self.assertFalse(household_form.is_valid())
    #     message = "Ensure this value is greater than or equal to 0."
    #     self.assertEquals(household_form.errors['uid'], [message])
    #
    #     form_data['uid'] = 'not a number'
    #     household_form = HouseholdForm(data=form_data)
    #     self.assertFalse(household_form.is_valid())
    #     self.assertEquals(household_form.errors['uid'], ['Enter a whole number.'])
    #
    #     form_data['uid'] = None
    #     household_form = HouseholdForm(data=form_data)
    #     self.assertFalse(household_form.is_valid())
    #     self.assertEquals(household_form.errors['uid'], ['This field is required.'])

    # def test_household_uid_is_autogenerated_based_on_existing_households(self):
    #     investigator = Interviewer.objects.create(name="test", backend=Backend.objects.create(name='something'))
    #     Household.objects.create(uid=1, investigator=investigator)
    #
    #     household_form = HouseholdForm()
    #     self.assertEqual(2, household_form.fields['uid'].initial)
    #
    # def test_raises_validation_error_if_uid_entered_already_exists(self):
    #     investigator = Interviewer.objects.create(name="test", backend=Backend.objects.create(name='something'))
    #     household = Household.objects.create(uid=1, investigator=investigator)
    #
    #     form_data = {
    #         'uid': 1
    #     }
    #     household_form = HouseholdForm(data=form_data)
    #     self.assertFalse(household_form.is_valid())
    #     message = "Household with this Household Unique Identification already exists."
    #     self.assertEquals(household_form.errors['uid'], [message])